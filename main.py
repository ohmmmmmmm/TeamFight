# main.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡πâÎìú‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ)

import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime, timedelta # ‡πÄ‡∏û‡∏¥‡πà‡∏° timedelta ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô help ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
import pytz
import json
import os
from dotenv import load_dotenv
import traceback # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error handling

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---
from flask import Flask
from threading import Thread

flask_instance = Flask('') # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö module 'app' ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ

@flask_instance.route('/')
def flask_home_route(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    return "Practice Management Bot is alive!"

def run_flask_server(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    port = int(os.environ.get('PORT', 8080))
    print(f"[{datetime.now(TZ_BANGKOK).strftime('%Y-%m-%d %H:%M:%S')}] Flask server attempting to run on host 0.0.0.0, port {port}")
    try:
        # ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ WSGI server ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production ‡πÄ‡∏ä‡πà‡∏ô gunicorn, waitress
        # ‡πÅ‡∏ï‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Render Free Tier, Flask's built-in server ‡∏Å‡πá‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        flask_instance.run(host='0.0.0.0', port=port)
    except Exception as e_flask_run:
        print(f"[{datetime.now(TZ_BANGKOK).strftime('%Y-%m-%d %H:%M:%S')}] !!! ERROR starting Flask server: {e_flask_run}")


def start_keep_alive_server(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    t = Thread(target=run_flask_server)
    t.daemon = True
    t.start()
    print(f"[{datetime.now(TZ_BANGKOK).strftime('%Y-%m-%d %H:%M:%S')}] Keep-alive server thread initiated.")

# --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---

load_dotenv()

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.guilds = True # ‡πÄ‡∏û‡∏¥‡πà‡∏° Guilds intent ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï (‡πÄ‡∏ä‡πà‡∏ô on_guild_join)

# ‡∏õ‡∏¥‡∏î Default Help Command ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Custom Help Command
bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)
TZ_BANGKOK = pytz.timezone('Asia/Bangkok')

# --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö (Global Variables) ---
# ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ config file ‡∏´‡∏£‡∏∑‡∏≠ database ‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß
members = {
    "Juno": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Candy": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Sindrea": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Yam": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Chababa": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Naila": "‡∏Ç‡∏≤‡∏î ‚õî",
    "HeiHei": "‡∏Ç‡∏≤‡∏î ‚õî",
    "HoneyLex": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Aiikz": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Hanna": "‡∏Ç‡∏≤‡∏î ‚õî",
    "Songkran": "‡∏Ç‡∏≤‡∏î ‚õî",
}
name_mapping = {
    "onitsuka3819": "Juno",
    "candy_dayy": "Candy",
    "sindrea_cz": "Sindrea",
    "yam2196": "Yam",
    "chababa.": "Chababa",
    "naila_888": "Naila",
    "ms.k3144": "HeiHei",
    "honeylexfahwabwab": "HoneyLex",
    "aiikz": "Aiikz",
    "hanna05682": "Hanna",
    "songkran_gbn": "Songkran",
}
practice_info = {
    "id": None, "date": None, "time": None, "location": None,
    "is_open_for_signup": False
}
practice_history = []
last_practice_message = None # Discord message object for the current practice
update_enabled = True

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
HISTORY_FILE_PATH = 'practice_history_data.json' # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
ANNOUNCEMENT_CHANNEL_ID = 1375796432140763216 # **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å: ‡πÉ‡∏™‡πà ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á**
SETTING_CHANNEL_NAME = "üî•‚îÉsetting"
SIGNUP_CHANNEL_NAME = "üî•‚îÉ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°"

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ Log ---
def log_message(message_text, level="INFO"): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° level
    timestamp = datetime.now(TZ_BANGKOK).strftime('%Y-%m-%d %H:%M:%S %Z')
    print(f"[{timestamp}] [{level}] {message_text}")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
def load_all_data():
    global practice_history, update_enabled, practice_info
    try:
        with open(HISTORY_FILE_PATH, 'r', encoding='utf-8') as f:
            data = json.load(f)
        practice_history = data.get("history", [])
        update_enabled = data.get("update_enabled", True)
        # practice_info ‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°, ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ !setplay ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        practice_info = {"id": None, "date": None, "time": None, "location": None, "is_open_for_signup": False}

        history_was_modified = False
        for i, entry in enumerate(practice_history):
            if not entry.get("id") or not entry["id"].isdigit() or len(entry["id"]) != 3:
                entry["id"] = f"{len(practice_history) - i:03d}" # ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                history_was_modified = True
            if "is_open_for_signup" not in entry:
                entry["is_open_for_signup"] = False # entry ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                history_was_modified = True
        if history_was_modified:
            save_all_data()
        log_message(f"Data loaded. History: {len(practice_history)} entries, Update Task: {'Enabled' if update_enabled else 'Disabled'}")
    except FileNotFoundError:
        log_message(f"'{HISTORY_FILE_PATH}' not found. Initializing with empty data.", level="WARNING")
        practice_history, update_enabled = [], True
        practice_info = {"id": None, "date": None, "time": None, "location": None, "is_open_for_signup": False}
        save_all_data() # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
    except json.JSONDecodeError:
        log_message(f"Error decoding '{HISTORY_FILE_PATH}'. File might be corrupted. Initializing.", level="ERROR")
        # ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
        practice_history, update_enabled = [], True
        practice_info = {"id": None, "date": None, "time": None, "location": None, "is_open_for_signup": False}
    except Exception as e:
        log_message(f"Unexpected error during load_all_data: {e}", level="ERROR")
        traceback.print_exc()

def save_all_data():
    data_to_persist = {"history": practice_history, "update_enabled": update_enabled}
    try:
        with open(HISTORY_FILE_PATH, 'w', encoding='utf-8') as f:
            json.dump(data_to_persist, f, ensure_ascii=False, indent=4)
    except Exception as e:
        log_message(f"ERROR saving data to '{HISTORY_FILE_PATH}': {e}", level="ERROR")

def generate_next_practice_id():
    if not practice_history: return "001"
    numeric_ids = [int(e["id"]) for e in practice_history if e.get("id") and e["id"].isdigit() and len(e["id"]) == 3]
    return f"{(max(numeric_ids) if numeric_ids else 0) + 1:03d}"

def archive_current_practice_details():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏≤‡∏Å practice_info) ‡∏•‡∏á‡πÉ‡∏ô practice_history"""
    if practice_info.get("id") and all(practice_info.get(k) for k in ["date", "time", "location"]):
        entry_to_archive = {
            "id": practice_info["id"],
            "date": practice_info["date"],
            "time": practice_info["time"],
            "location": practice_info["location"],
            "members": members.copy(), # ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            "is_open_for_signup": practice_info.get("is_open_for_signup", False)
        }
        # ‡∏•‡∏ö entry ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        practice_history[:] = [entry for entry in practice_history if entry.get("id") != practice_info["id"]]
        practice_history.append(entry_to_archive)
        practice_history.sort(key=lambda x: x.get("id", "000")) # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID
        save_all_data()
        log_message(f"Archived/Updated practice ID {practice_info['id']} in history.")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Embeds ---
def create_current_practice_notification_embed():
    if not all(practice_info.get(k) for k in ["id", "date", "time", "location"]): return None
    embed = discord.Embed(
        title=f"üì¢ ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']})",
        color=discord.Color.green() if practice_info.get("is_open_for_signup") else discord.Color.dark_orange()
    )
    embed.add_field(name="üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=practice_info['date'], inline=True)
    embed.add_field(name="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤", value=practice_info['time'], inline=True)
    embed.add_field(name="üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", value=f"`{practice_info['location']}`", inline=False)
    status_text = "‚úÖ **‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠**" if practice_info.get("is_open_for_signup") else "üÖæÔ∏è **‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß**"
    embed.add_field(name="üìù ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", value=status_text, inline=False)
    member_lines = [f"‚Ä¢ {name}: `{status}`" for name, status in members.items()]
    embed.add_field(name="üë• ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡∏°", value="\n".join(member_lines) or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", inline=False)
    embed.set_footer(text=f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now(TZ_BANGKOK).strftime('%d %b %Y, %H:%M:%S')}")
    if bot.user and bot.user.display_avatar: embed.set_thumbnail(url=bot.user.display_avatar.url)
    return embed

def create_practice_summary_embed_by_id(id_to_summarize: str):
    source = None
    summary_members_state = None
    if practice_info.get("id") == id_to_summarize:
        source = practice_info
        summary_members_state = members # ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ members ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    else:
        for entry in practice_history:
            if entry.get("id") == id_to_summarize:
                source = entry
                summary_members_state = entry.get("members", {}) # ‡πÉ‡∏ä‡πâ members ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô history
                break
    if not source or not all(source.get(k) for k in ["date", "time", "location"]):
        return discord.Embed(title="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°", description=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà `{id_to_summarize}`", color=discord.Color.red())

    embed = discord.Embed(title=f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {id_to_summarize})", color=discord.Color.gold())
    embed.add_field(name="üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=source['date'], inline=True)
    embed.add_field(name="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤", value=source['time'], inline=True)
    embed.add_field(name="üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", value=f"`{source['location']}`", inline=False)
    member_lines = [f"‚Ä¢ {name}: `{status}`" for name, status in summary_members_state.items()]
    embed.add_field(name="üë• ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°", value="\n".join(member_lines) or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠", inline=False)
    embed.set_footer(text=f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now(TZ_BANGKOK).strftime('%d %b %Y, %H:%M:%S')}")
    return embed

# --- Tasks ---
@tasks.loop(minutes=5)
async def auto_update_status_message_task():
    global last_practice_message
    if not update_enabled or not practice_info.get("id") or not bot.is_ready(): return

    announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if not announcement_channel:
        log_message(f"Announcement channel ID {ANNOUNCEMENT_CHANNEL_ID} not found for auto-update.", "ERROR")
        return

    if last_practice_message:
        try: await last_practice_message.delete()
        except (discord.NotFound, discord.Forbidden): pass
        except Exception as e: log_message(f"Error deleting old status message for auto-update: {e}", "WARNING")
        finally: last_practice_message = None # Ensure it's reset

    notification_embed = create_current_practice_notification_embed()
    if notification_embed:
        try: last_practice_message = await announcement_channel.send(embed=notification_embed)
        except discord.Forbidden: log_message(f"Bot lacks permission to send messages in announcement channel for auto-update.", "ERROR")
        except Exception as e: log_message(f"Error sending new status message for auto-update: {e}", "ERROR")

# --- Custom Help Command ---
class CustomHelp(commands.HelpCommand):
    def __init__(self):
        super().__init__(command_attrs={
            'help': '‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡∏µ‡πâ',
            'aliases': ['‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'h', '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á', 'cmd']
        })

    async def send_bot_help(self, mapping):
        embed = discord.Embed(
            title="ü§ñ ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ Bot ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°",
            description=f"‡πÉ‡∏ä‡πâ prefix `{self.context.prefix}` ‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (‡πÄ‡∏ä‡πà‡∏ô `{self.context.prefix}‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°`)\n"
                        f"‡∏û‡∏¥‡∏°‡∏û‡πå `{self.context.prefix}help <‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á>` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÜ",
            color=discord.Color.from_rgb(173, 216, 230) # Light Blue
        )
        if self.context.bot.user and self.context.bot.user.display_avatar:
            embed.set_thumbnail(url=self.context.bot.user.display_avatar.url)

        for cog, command_list in mapping.items():
            filtered_cmds = await self.filter_commands(command_list, sort=True)
            if not filtered_cmds: continue

            cmd_details = []
            for cmd in filtered_cmds:
                signature = self.get_command_signature(cmd)
                help_text = cmd.help or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"
                cmd_details.append(f"**`{signature}`**\n*{help_text}*")
            
            cog_name = cog.qualified_name if cog else "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
            embed.add_field(name=f"**{cog_name}**", value="\n\n".join(cmd_details), inline=False)
        
        destination = self.get_destination()
        await destination.send(embed=embed)
        log_message(f"Help command invoked by {self.context.author} in #{self.context.channel}")

    async def send_command_help(self, command):
        if not await self.filter_commands([command]):
            await self.send_error_message(await self.command_not_found(command.qualified_name))
            return

        embed = discord.Embed(
            title=f"üîç ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `{self.get_command_signature(command)}`",
            description=command.help or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
            color=discord.Color.from_rgb(144, 238, 144) # Light Green
        )
        if command.aliases:
            embed.add_field(name="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏≠‡∏∑‡πà‡∏ô (Aliases)", value="`, `".join(command.aliases), inline=False)
        
        # Example for adding usage if you define it in command (e.g., command.usage = "<argument1> [optional_argument]")
        # usage = self.get_command_signature(command) # This already includes params
        # embed.add_field(name="‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ", value=f"`{usage}`", inline=False)
        
        destination = self.get_destination()
        await destination.send(embed=embed)
        log_message(f"Help for command '{command.name}' invoked by {self.context.author}")

    async def send_group_help(self, group): # For command groups, if you use them
        embed = discord.Embed(title=f"‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `{self.get_command_signature(group)}`", description=group.help or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", color=discord.Color.dark_gold())
        filtered_cmds = await self.filter_commands(group.commands, sort=True)
        for cmd in filtered_cmds:
            embed.add_field(name=self.get_command_signature(cmd), value=cmd.short_doc or cmd.help or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏¢‡πà‡∏≠", inline=False)
        destination = self.get_destination()
        await destination.send(embed=embed)

    async def command_not_found(self, string): return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠ `{string}`"
    async def subcommand_not_found(self, command, string): return f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡πà‡∏≠‡∏¢ `{string}` ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° `{command.qualified_name}`"
    async def send_error_message(self, error_text):
        destination = self.get_destination()
        await destination.send(f"üòï {error_text}", delete_after=10)
        log_message(f"Help system error: {error_text}", "WARNING")

bot.help_command = CustomHelp()
# --- ‡∏à‡∏ö Custom Help Command ---


# --- Bot Events ---
@bot.event
async def on_ready():
    log_message(f"Bot {bot.user.name} (ID: {bot.user.id}) is online and ready!")
    load_all_data()
    if not auto_update_status_message_task.is_running():
        auto_update_status_message_task.start()
        log_message("Auto-update status message task started.")
    start_keep_alive_server()
    try:
        activity_name = f"‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡∏° | {bot.command_prefix}help"
        await bot.change_presence(activity=discord.Game(name=activity_name))
        log_message(f"Bot presence set to: Playing {activity_name}")
    except Exception as e: log_message(f"Error setting bot presence: {e}", "WARNING")

# --- Decorators & Checks ---
def check_if_correct_channel(channel_name_or_id):
    async def predicate(ctx):
        is_valid_channel = False
        if isinstance(channel_name_or_id, int): is_valid_channel = (ctx.channel.id == channel_name_or_id)
        elif isinstance(channel_name_or_id, str): is_valid_channel = (ctx.channel.name.lower() == channel_name_or_id.lower())
        
        if not is_valid_channel:
            err_msg = f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á '{channel_name_or_id}'" if isinstance(channel_name_or_id, str) else "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            try: await ctx.send(f"üö´ {err_msg}", ephemeral=True, delete_after=10)
            except: pass # Ignore if can't send ephemeral
        return is_valid_channel
    return commands.check(predicate)

# --- Bot Commands ---
@bot.command(name="‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", aliases=["disableupdate"], help="‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
@check_if_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(administrator=True)
async def cmd_disable_update(ctx):
    global update_enabled
    if not update_enabled: await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=7); return
    update_enabled = False; save_all_data()
    await ctx.send("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@bot.command(name="‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", aliases=["enableupdate"], help="‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ (Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)")
@check_if_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(administrator=True)
async def cmd_enable_update(ctx):
    global update_enabled, last_practice_message
    if update_enabled: await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=7); return
    update_enabled = True; save_all_data()
    await ctx.send("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    if practice_info.get("id"): # ‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        ann_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
        if ann_ch:
            if last_practice_message:
                try: await last_practice_message.delete(); last_practice_message = None
                except: pass
            embed = create_current_practice_notification_embed()
            if embed:
                try: last_practice_message = await ann_ch.send(embed=embed)
                except: pass

@bot.command(name="‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°", aliases=["‡∏ã‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡∏°"], help=f"‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á '{SIGNUP_CHANNEL_NAME}')")
@check_if_correct_channel(SIGNUP_CHANNEL_NAME)
async def cmd_signup_practice(ctx):
    user_command_msg = ctx.message # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ß‡πâ‡∏•‡∏ö‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
    
    async def delete_user_command(): # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        try: await user_command_msg.delete()
        except discord.Forbidden: log_message(f"Bot lacks 'Manage Messages' in #{ctx.channel.name}", "WARNING")
        except discord.HTTPException: pass # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß

    if not practice_info.get("id"):
        await ctx.send("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", ephemeral=True, delete_after=10)
        await delete_user_command()
        return
        
    if not practice_info.get("is_open_for_signup", False):
        await ctx.send(f"üÖæÔ∏è ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=10)
        await delete_user_command()
        return

    discord_account_name = ctx.author.name # ‡∏´‡∏£‡∏∑‡∏≠ ctx.author.display_name ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    team_member_name = name_mapping.get(discord_account_name)

    if team_member_name and team_member_name in members:
        if members[team_member_name] == "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‚úÖ":
            await ctx.send(f"üëç {team_member_name} ‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=7)
        else:
            members[team_member_name] = "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‚úÖ"
            await ctx.send(f"‚úÖ {team_member_name} ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", delete_after=7) # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            archive_current_practice_details() # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô history

            if update_enabled: # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                global last_practice_message
                ann_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
                if ann_ch:
                    if last_practice_message:
                        try: await last_practice_message.delete(); last_practice_message = None
                        except: pass
                    embed = create_current_practice_notification_embed()
                    if embed:
                        try: last_practice_message = await ann_ch.send(embed=embed)
                        except: pass
    else:
        await ctx.send(f"‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Discord ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ({discord_account_name}) ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°", ephemeral=True, delete_after=10)
    
    await delete_user_command() # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

@bot.command(name="‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", aliases=["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ã‡πâ‡∏≠‡∏°"], help="‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
async def cmd_check_status(ctx):
    if not practice_info.get("id"):
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", ephemeral=True, delete_after=10); return
    embed = create_current_practice_notification_embed()
    if embed: await ctx.send(embed=embed)
    else: await ctx.send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ephemeral=True, delete_after=10)

@bot.command(name="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≠‡∏°", aliases=["setplay"], help="‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô, ‡πÄ‡∏ß‡∏•‡∏≤, ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (Admin, ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Setting)")
@check_if_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(manage_guild=True) # ‡∏´‡∏£‡∏∑‡∏≠ role ‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏Å‡∏ß‡πà‡∏≤
async def cmd_set_practice(ctx):
    if practice_info.get("id"): # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
        if practice_info.get("is_open_for_signup"): practice_info["is_open_for_signup"] = False # ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤
        archive_current_practice_details() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô

    def check_author_channel(m): return m.author == ctx.author and m.channel == ctx.channel
    
    practice_details_prompts = [
        ("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏° (YYYY-MM-DD):", '%Y-%m-%d', "date", "2024-12-31"),
        ("‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≠‡∏° (HH:MM 24hr):", '%H:%M', "time", "20:00"),
        ("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏°:", None, "location", "Discord Voice / In-Game Server")
    ]
    collected_data = {}
    await ctx.send(f"üìù **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà** (‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏û‡∏¥‡∏°‡∏û‡πå `‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î):")

    for prompt_text, date_format, data_key, example_text in practice_details_prompts:
        await ctx.send(f"{prompt_text} (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `{example_text}`)")
        try:
            msg = await bot.wait_for('message', check=check_author_channel, timeout=180.0)
            content = msg.content.strip()
            if content.lower() == '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å':
                await ctx.send("üö´ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True); return
            if date_format: datetime.strptime(content, date_format) # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö format
            if not content: # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
                await ctx.send(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{data_key}' ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", ephemeral=True); return
            collected_data[data_key] = content
        except ValueError:
            await ctx.send(f"‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{data_key}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `{example_text}`). ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", ephemeral=True); return
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà", ephemeral=True); return

    practice_info["id"] = generate_next_practice_id()
    practice_info.update(collected_data)
    practice_info["is_open_for_signup"] = True
    for member_name in members: members[member_name] = "‡∏Ç‡∏≤‡∏î ‚õî" # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    archive_current_practice_details() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ
    
    await ctx.send(f"‚úÖ **‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!**\n"
                   f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {practice_info['date']}, ‡πÄ‡∏ß‡∏•‡∏≤: {practice_info['time']}, ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {practice_info['location']}",
                   ephemeral=True)

    global last_practice_message # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
    ann_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if ann_ch:
        if last_practice_message:
            try: await last_practice_message.delete(); last_practice_message = None
            except: pass
        embed = create_current_practice_notification_embed()
        if embed:
            try: last_practice_message = await ann_ch.send(embed=embed)
            except discord.Forbidden: log_message(f"Bot lacks permission to send new practice to announcement channel.", "ERROR")
    else: log_message(f"Announcement channel ID {ANNOUNCEMENT_CHANNEL_ID} not found for new practice.", "ERROR")

@bot.command(name="‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•", aliases=["‡∏™‡∏£‡∏∏‡∏õ"], help="‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏ï‡∏≤‡∏° ID ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (Admin, ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á Setting)")
@check_if_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(manage_guild=True)
async def cmd_summarize_practice(ctx, practice_id: str):
    if not (practice_id.isdigit() and len(practice_id) == 3):
        await ctx.send("‚ö†Ô∏è ID ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô `001`)", ephemeral=True, delete_after=10); return

    feedback = []
    if practice_info.get("id") == practice_id and practice_info.get("is_open_for_signup"):
        practice_info["is_open_for_signup"] = False
        archive_current_practice_details()
        feedback.append(f"‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}) ‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•")
    
    announcement_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if not announcement_ch:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (ID: {ANNOUNCEMENT_CHANNEL_ID})", ephemeral=True); return

    summary_embed = create_practice_summary_embed_by_id(practice_id)
    if "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" in summary_embed.title: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Embed ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        await ctx.send(summary_embed.description, ephemeral=True, delete_after=10); return

    try:
        await announcement_ch.send(embed=summary_embed)
        feedback.append(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}) ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß!")
    except discord.Forbidden:
        feedback.append(f"‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}) ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®")
    except Exception as e:
        feedback.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ: {e}")
        log_message(f"Error sending summary for ID {practice_id}: {e}", "ERROR")

    if feedback: await ctx.send("\n".join(feedback), ephemeral=True, delete_after=15)

# --- Error Handling (Event) ---
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound): return
    elif isinstance(error, commands.CheckFailure): # is_correct_channel, has_permissions
        log_message(f"CheckFailure for '{ctx.command}' by {ctx.author}: {error}", "INFO")
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß check ‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    elif isinstance(error, commands.MissingRequiredArgument):
        param = error.param.name if error.param else "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
        await ctx.send(f"‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà `{param}` ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢ `{ctx.prefix}help {ctx.command.qualified_name}`", ephemeral=True, delete_after=15)
    elif isinstance(error, commands.BadArgument):
        await ctx.send(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏õ‡πâ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡∏î‡∏π `{ctx.prefix}help {ctx.command.qualified_name}`", ephemeral=True, delete_after=15)
    else:
        log_message(f"Unhandled error in command '{ctx.command}' by '{ctx.author}': {error}", "ERROR")
        tb_str = "".join(traceback.format_exception(type(error), error, error.__traceback__))
        log_message(f"Traceback:\n{tb_str}", "ERROR")
        try:
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: `{error}`. ‡πÑ‡∏î‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=15)
        except: pass # Ignore if cannot send feedback

# --- Run Bot ---
DISCORD_BOT_TOKEN = os.getenv('DISCORD_TOKEN')
if not DISCORD_BOT_TOKEN:
    log_message("CRITICAL ERROR: DISCORD_TOKEN environment variable not found. Bot cannot start.", "CRITICAL")
else:
    try:
        log_message("Attempting to run bot...")
        bot.run(DISCORD_BOT_TOKEN)
    except discord.errors.LoginFailure:
        log_message("CRITICAL ERROR: Login Failed. Token is invalid or bot has incorrect intents enabled.", "CRITICAL")
    except discord.errors.PrivilegedIntentsRequired:
        log_message("CRITICAL ERROR: Privileged Intents (Server Members or Message Content) are not enabled in the Discord Developer Portal for this bot.", "CRITICAL")
    except Exception as e_main:
        log_message(f"CRITICAL ERROR during bot.run(): {e_main}", "CRITICAL")
        traceback.print_exc()