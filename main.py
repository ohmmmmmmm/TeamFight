# main.py (‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î - ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)

import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime
import pytz
import json
import os
from dotenv import load_dotenv

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "Server is running!"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    # ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ deploy ‡∏à‡∏£‡∏¥‡∏á ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ Werkzeug (Flask's default server) ‡πÅ‡∏™‡∏î‡∏á log ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á
    # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ production-ready WSGI server ‡πÄ‡∏ä‡πà‡∏ô gunicorn
    print(f"Flask server attempting to run on host 0.0.0.0, port {port}")
    try:
        app.run(host='0.0.0.0', port=port)
    except Exception as e_flask_run:
        print(f"!!! ERROR starting Flask server: {e_flask_run}")


def start_server():
    t = Thread(target=run_flask)
    t.daemon = True
    t.start()
    print("Flask server thread initiated.")

# --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---

load_dotenv() # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Bot ---
intents = discord.Intents.default()
intents.message_content = True
intents.members = True # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ ctx.author.name ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö members
bot = commands.Bot(command_prefix='!', intents=intents)
TZ_BANGKOK = pytz.timezone('Asia/Bangkok')

# --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö ---
members = { # ‡∏Ñ‡∏ß‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å config ‡∏´‡∏£‡∏∑‡∏≠ database ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ö‡πà‡∏≠‡∏¢
    "Juno": "‡∏Ç‡∏≤‡∏î", "candy": "‡∏Ç‡∏≤‡∏î", "sindrea": "‡∏Ç‡∏≤‡∏î",
    "yam": "‡∏Ç‡∏≤‡∏î", "chababa": "‡∏Ç‡∏≤‡∏î", "naila": "‡∏Ç‡∏≤‡∏î",
}
name_mapping = { # ‡∏Ñ‡∏ß‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å config ‡∏´‡∏£‡∏∑‡∏≠ database ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
    "onitsuka3819": "Juno", "candy_dayy": "candy", "sindrea_cz": "sindrea",
    "yam2196": "yam", "chababa.": "chababa", "naila_888": "naila",
}
# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
practice_info = {
    "id": None, "date": None, "time": None, "location": None,
    "is_open_for_signup": False
}
practice_history = [] # ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
last_practice_message = None # ‡πÄ‡∏Å‡πá‡∏ö object ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
update_enabled = True # ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á tasks.loop

# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
HISTORY_FILE = 'practice_history.json' # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
ANNOUNCEMENT_CHANNEL_ID = 1375796432140763216 # ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å)
SETTING_CHANNEL_NAME = "üî•‚îÉsetting"
SIGNUP_CHANNEL_NAME = "üî•‚îÉ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°"

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
def log_ts(message): # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ log ‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp
    print(f"[{datetime.now(TZ_BANGKOK).strftime('%Y-%m-%d %H:%M:%S')}] {message}")

def load_data_from_file(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    global practice_history, update_enabled, practice_info
    try:
        with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        practice_history = data.get("history", [])
        update_enabled = data.get("update_enabled", True)
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï practice_info ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î; ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢ !setplay ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        practice_info = {"id": None, "date": None, "time": None, "location": None, "is_open_for_signup": False}

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° ID ‡πÅ‡∏•‡∏∞ is_open_for_signup ‡πÉ‡∏ô history
        history_modified = False
        for i, entry in enumerate(practice_history):
            if not entry.get("id") or not entry["id"].isdigit():
                entry["id"] = f"{len(practice_history) - i:03d}" # Logic ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
                history_modified = True
            if "is_open_for_signup" not in entry:
                entry["is_open_for_signup"] = False # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ entry ‡πÄ‡∏Å‡πà‡∏≤‡πÜ ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                history_modified = True
        if history_modified:
            save_data_to_file()
        log_ts(f"Data loaded. History entries: {len(practice_history)}, Update enabled: {update_enabled}")
    except FileNotFoundError:
        log_ts(f"'{HISTORY_FILE}' not found. Initializing with empty data.")
        practice_history, update_enabled = [], True
        practice_info = {"id": None, "date": None, "time": None, "location": None, "is_open_for_signup": False}
        save_data_to_file() # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    except json.JSONDecodeError:
        log_ts(f"Error decoding '{HISTORY_FILE}'. File might be corrupted. Initializing.")
        practice_history, update_enabled = [], True
        practice_info = {"id": None, "date": None, "time": None, "location": None, "is_open_for_signup": False}
        # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡∏ö
    except Exception as e:
        log_ts(f"An unexpected error occurred during load_data_from_file: {e}")


def save_data_to_file(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    data_to_save = {"history": practice_history, "update_enabled": update_enabled}
    # ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å practice_info ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå history ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ persistence ‡∏Ç‡∏≠‡∏á practice_info ‡∏Ñ‡∏ß‡∏£‡πÅ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ DB
    try:
        with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
            json.dump(data_to_save, f, ensure_ascii=False, indent=4)
        # log_ts(f"Data saved to '{HISTORY_FILE}'.") # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ log ‡∏ñ‡∏µ‡πà‡πÑ‡∏õ
    except Exception as e:
        log_ts(f"ERROR saving data to '{HISTORY_FILE}': {e}")

def generate_new_practice_id():
    if not practice_history: return "001"
    numeric_ids = [int(e["id"]) for e in practice_history if e.get("id") and e["id"].isdigit()]
    return f"{(max(numeric_ids) if numeric_ids else 0) + 1:03d}"

def archive_current_practice_if_exists():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (practice_info) ‡∏•‡∏á‡πÉ‡∏ô practice_history ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    if practice_info.get("id") and all(practice_info.get(k) for k in ["date", "time", "location"]):
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ID ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô history ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        existing_entry_index = -1
        for i, entry in enumerate(practice_history):
            if entry.get("id") == practice_info["id"]:
                existing_entry_index = i
                break
        
        entry_to_save = {
            "id": practice_info["id"],
            "date": practice_info["date"],
            "time": practice_info["time"],
            "location": practice_info["location"],
            "members": members.copy(), # ‡πÉ‡∏ä‡πâ members ‡∏ì ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
            "is_open_for_signup": practice_info.get("is_open_for_signup", False)
        }

        if existing_entry_index != -1: # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ID ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß, ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
            practice_history[existing_entry_index] = entry_to_save
            log_ts(f"Updated practice ID {practice_info['id']} in history.")
        else: # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ID ‡πÉ‡∏´‡∏°‡πà, ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
            practice_history.append(entry_to_save)
            log_ts(f"Archived new practice ID {practice_info['id']} to history.")
        
        practice_history.sort(key=lambda x: x.get("id", "000"))
        save_data_to_file()


def create_practice_notification_embed(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á Embed
    if not all(practice_info.get(k) for k in ["id", "date", "time", "location"]):
        return None # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    embed = discord.Embed(
        title=f"üì¢ ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']})",
        color=discord.Color.blue() if practice_info.get("is_open_for_signup") else discord.Color.orange()
    )
    embed.add_field(name="üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=practice_info['date'], inline=True)
    embed.add_field(name="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤", value=practice_info['time'], inline=True)
    embed.add_field(name="üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", value=practice_info['location'], inline=False)

    status_text = "‚úÖ **‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠**" if practice_info.get("is_open_for_signup") else "üÖæÔ∏è **‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß**"
    embed.add_field(name="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠", value=status_text, inline=False)

    member_status_lines = [f"‚Ä¢ {name}: {status}" for name, status in members.items()]
    embed.add_field(name="üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πä‡∏á", value="\n".join(member_status_lines) or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å", inline=False)
    embed.set_footer(text=f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now(TZ_BANGKOK).strftime('%H:%M:%S')}")
    return embed

def create_practice_summary_embed(practice_id_to_summarize: str): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    data_source = None
    current_members_state = None

    if practice_info.get("id") == practice_id_to_summarize:
        data_source = practice_info
        current_members_state = members # ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ members ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    else:
        for entry in practice_history:
            if entry.get("id") == practice_id_to_summarize:
                data_source = entry
                current_members_state = entry.get("members", {}) # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å history ‡πÉ‡∏ä‡πâ members ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
                break
    
    if not data_source or not all(data_source.get(k) for k in ["date", "time", "location"]):
        return discord.Embed(title=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°", description=f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id_to_summarize}", color=discord.Color.red())

    embed = discord.Embed(title=f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id_to_summarize})", color=discord.Color.green())
    embed.add_field(name="üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=data_source['date'], inline=True)
    embed.add_field(name="‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤", value=data_source['time'], inline=True)
    embed.add_field(name="üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", value=data_source['location'], inline=False)
    
    member_summary_lines = [f"‚Ä¢ {name}: {status}" for name, status in current_members_state.items()]
    embed.add_field(name="üìã ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠", value="\n".join(member_summary_lines) or "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠", inline=False)
    embed.set_footer(text=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ ‡∏ì {datetime.now(TZ_BANGKOK).strftime('%d/%m/%Y %H:%M:%S')}")
    return embed

# --- Tasks ---
@tasks.loop(minutes=5)
async def periodic_status_update_task(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    global last_practice_message
    if not update_enabled or not practice_info.get("id") or not bot.is_ready():
        return

    announcement_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if not announcement_ch:
        log_ts(f"ERROR: Announcement channel ID {ANNOUNCEMENT_CHANNEL_ID} not found for periodic update.")
        return

    if last_practice_message:
        try:
            await last_practice_message.delete()
        except (discord.NotFound, discord.Forbidden): pass # Already deleted or no permission
        except Exception as e: log_ts(f"Error deleting old status message for update: {e}")
        finally: last_practice_message = None

    notification_embed = create_practice_notification_embed()
    if notification_embed:
        try:
            last_practice_message = await announcement_ch.send(embed=notification_embed)
        except discord.Forbidden: log_ts(f"ERROR: Bot lacks permission to send messages in announcement channel for update.")
        except Exception as e: log_ts(f"Error sending new status message for update: {e}")

# --- Bot Events ---
@bot.event
async def on_ready():
    log_ts(f"Bot {bot.user.name} (ID: {bot.user.id}) is online and ready!")
    load_data_from_file() # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°
    if not periodic_status_update_task.is_running():
        periodic_status_update_task.start()
        log_ts("Periodic status update task started.")
    start_server() # ‡πÄ‡∏£‡∏¥‡πà‡∏° Flask server
    try:
        activity_name = f"‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° | {bot.command_prefix}setplay"
        await bot.change_presence(activity=discord.Game(name=activity_name))
        log_ts(f"Bot presence set to: Playing {activity_name}")
    except Exception as e:
        log_ts(f"Error setting bot presence: {e}")

# --- Decorators & Checks ---
def is_correct_channel(channel_name_or_id): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    async def predicate(ctx):
        is_valid = False
        if isinstance(channel_name_or_id, int):
            is_valid = (ctx.channel.id == channel_name_or_id)
        elif isinstance(channel_name_or_id, str):
            is_valid = (ctx.channel.name.lower() == channel_name_or_id.lower())
        
        if not is_valid:
            error_msg = f"‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á '{channel_name_or_id}' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!" if isinstance(channel_name_or_id, str) else "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!"
            try: await ctx.send(error_msg, ephemeral=True, delete_after=10)
            except: pass # Ignore if cannot send ephemeral (e.g., in DMs, though check should prevent this)
        return is_valid
    return commands.check(predicate)

# --- Bot Commands ---
@bot.command(name="‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", aliases=["disableupdate"])
@is_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(administrator=True) # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
async def disable_periodic_update(ctx):
    global update_enabled
    if not update_enabled:
        await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=10)
        return
    update_enabled = False
    save_data_to_file() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ update_enabled
    await ctx.send("‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@bot.command(name="‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï", aliases=["enableupdate"])
@is_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(administrator=True) # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
async def enable_periodic_update(ctx):
    global update_enabled, last_practice_message
    if update_enabled:
        await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=10)
        return
    update_enabled = True
    save_data_to_file() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ update_enabled
    await ctx.send("‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    # ‡∏•‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if practice_info.get("id"):
        announcement_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
        if announcement_ch:
            if last_practice_message:
                try: await last_practice_message.delete()
                except: pass
            notification_embed = create_practice_notification_embed()
            if notification_embed:
                try: last_practice_message = await announcement_ch.send(embed=notification_embed)
                except: pass

@bot.command(name="‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°", aliases=["‡∏ã‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡∏°"])
@is_correct_channel(SIGNUP_CHANNEL_NAME)
async def sign_up_for_practice(ctx): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    command_message_to_delete = ctx.message # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô

    if not practice_info.get("id"):
        await ctx.send("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", ephemeral=True, delete_after=10)
        try: await command_message_to_delete.delete(delay=1) # ‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á feedback
        except: pass
        return
        
    if not practice_info.get("is_open_for_signup", False):
        await ctx.send(f"üÖæÔ∏è ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=10)
        try: await command_message_to_delete.delete(delay=1)
        except: pass
        return

    discord_user_name_key = ctx.author.name # ‡∏´‡∏£‡∏∑‡∏≠ ctx.author.display_name ‡∏´‡∏£‡∏∑‡∏≠ ctx.author.global_name
    mapped_name = name_mapping.get(discord_user_name_key)

    if mapped_name and mapped_name in members:
        if members[mapped_name] == "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß":
            await ctx.send(f"‚úÖ {mapped_name} ‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True, delete_after=7)
        else:
            members[mapped_name] = "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
            await ctx.send(f"üëç {mapped_name} ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", delete_after=7) # ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡πà‡∏≠‡∏ô
            archive_current_practice_if_exists() # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô history/file

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î update_enabled)
            if update_enabled:
                global last_practice_message
                announcement_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
                if announcement_ch:
                    if last_practice_message:
                        try: await last_practice_message.delete()
                        except: pass
                    notification_embed = create_practice_notification_embed()
                    if notification_embed:
                        try: last_practice_message = await announcement_ch.send(embed=notification_embed)
                        except: pass
    else:
        await ctx.send(f"‚ùì ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏∏‡∏ì ({discord_user_name_key}) ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", ephemeral=True, delete_after=10)

    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ (‡∏ñ‡πâ‡∏≤‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    try:
        await command_message_to_delete.delete()
    except discord.Forbidden:
        log_ts(f"Bot lacks 'Manage Messages' permission in '{ctx.channel.name}' to delete user command.")
    except discord.HTTPException:
        pass # Message might have been deleted already

@bot.command(name="‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", aliases=["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ã‡πâ‡∏≠‡∏°"])
async def check_current_practice_status(ctx): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    if not practice_info.get("id"):
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", ephemeral=True, delete_after=10)
        return
    notification_embed = create_practice_notification_embed()
    if notification_embed:
        await ctx.send(embed=notification_embed)
    else:
        await ctx.send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ephemeral=True, delete_after=10)

@bot.command(name="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≠‡∏°", aliases=["setplay"])
@is_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(manage_guild=True) # ‡∏´‡∏£‡∏∑‡∏≠ role ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
async def setup_new_practice(ctx): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    # 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏•‡∏á history ‡πÅ‡∏•‡∏∞‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏à‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    if practice_info.get("id"):
        if practice_info.get("is_open_for_signup"): # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô
            practice_info["is_open_for_signup"] = False
        archive_current_practice_if_exists() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤

    # 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    def message_check(m): return m.author == ctx.author and m.channel == ctx.channel

    inputs_required = [
        ("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏° (YYYY-MM-DD):", '%Y-%m-%d', "date"),
        ("‡πÄ‡∏ß‡∏•‡∏≤‡∏ã‡πâ‡∏≠‡∏° (HH:MM):", '%H:%M', "time"),
        ("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏°:", None, "location") # None for no format check beyond stripping
    ]
    new_practice_data = {}
    await ctx.send("‚úçÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£):")

    for prompt, fmt, key in inputs_required:
        await ctx.send(prompt)
        try:
            msg = await bot.wait_for('message', check=message_check, timeout=120.0)
            content = msg.content.strip()
            if fmt: # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö format (date, time)
                datetime.strptime(content, fmt) # ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á, ‡∏ñ‡πâ‡∏≤ error ‡∏à‡∏∞‡πÑ‡∏õ‡∏ó‡∏µ‡πà except ValueError
            if not content: # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
                await ctx.send("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ `!setplay`", ephemeral=True)
                return
            new_practice_data[key] = content
        except ValueError:
            await ctx.send(f"‚ö†Ô∏è ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{key}' ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {prompt.split('(')[1].split(')')[0]}). ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ `!setplay`", ephemeral=True)
            return
        except asyncio.TimeoutError:
            await ctx.send("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ `!setplay`", ephemeral=True)
            return

    # 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï practice_info ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    practice_info["id"] = generate_new_practice_id()
    practice_info["date"] = new_practice_data["date"]
    practice_info["time"] = new_practice_data["time"]
    practice_info["location"] = new_practice_data["location"]
    practice_info["is_open_for_signup"] = True # ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà

    # 4. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö `members` ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    for member_name in members: members[member_name] = "‡∏Ç‡∏≤‡∏î"

    # 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏•‡∏á history ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÄ‡∏õ‡∏¥‡∏î")
    archive_current_practice_if_exists()
    await ctx.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

    # 6. ‡∏™‡πà‡∏á Notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
    global last_practice_message
    announcement_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if announcement_ch:
        if last_practice_message:
            try: await last_practice_message.delete()
            except: pass
        notification_embed = create_practice_notification_embed()
        if notification_embed:
            try: last_practice_message = await announcement_ch.send(embed=notification_embed)
            except discord.Forbidden: log_ts(f"ERROR: Bot lacks permission to send to announcement channel for new practice.")
    else:
        log_ts(f"ERROR: Announcement channel ID {ANNOUNCEMENT_CHANNEL_ID} not found for new practice notification.")


@bot.command(name="‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•", aliases=["‡∏™‡∏£‡∏∏‡∏õ"])
@is_correct_channel(SETTING_CHANNEL_NAME)
@commands.has_permissions(manage_guild=True) # ‡∏´‡∏£‡∏∑‡∏≠ role ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
async def summarize_practice(ctx, practice_id_to_summarize: str): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
    if not (practice_id_to_summarize.isdigit() and len(practice_id_to_summarize) == 3):
        await ctx.send("‚ö†Ô∏è ID ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 001)", ephemeral=True, delete_after=10)
        return

    feedback_message = [] # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° feedback

    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° "‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠
    if practice_info.get("id") == practice_id_to_summarize:
        if practice_info.get("is_open_for_signup"):
            practice_info["is_open_for_signup"] = False
            archive_current_practice_if_exists() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ
            feedback_message.append(f"‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id_to_summarize}) ‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
        else:
            feedback_message.append(f"‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id_to_summarize}) ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
    
    announcement_ch = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if not announcement_ch:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (ID: {ANNOUNCEMENT_CHANNEL_ID}) ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ", ephemeral=True)
        return

    summary_embed = create_practice_summary_embed(practice_id_to_summarize)
    
    try:
        await announcement_ch.send(embed=summary_embed)
        feedback_message.append(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id_to_summarize}) ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß!")
    except discord.Forbidden:
        feedback_message.append(f"‚ö†Ô∏è ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id_to_summarize}) ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®")
    except Exception as e:
        feedback_message.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ: {e}")
        log_ts(f"Error sending summary: {e}")

    if feedback_message:
        await ctx.send("\n".join(feedback_message), ephemeral=True, delete_after=15)


# --- Error Handling ---
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        return # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
    elif isinstance(error, commands.CheckFailure): # ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á is_correct_channel ‡πÅ‡∏•‡∏∞ has_permissions
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß check ‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß (ephemeral)
        log_ts(f"CheckFailure by {ctx.author} for command {ctx.command}: {error}")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(f"‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏•‡∏∑‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: `{ctx.prefix}{ctx.command.name} {ctx.command.signature}`", ephemeral=True, delete_after=15)
    else:
        log_ts(f"Unhandled error in command '{ctx.command}' by '{ctx.author}': {error}")
        traceback_str = "".join(traceback.format_exception(type(error), error, error.__traceback__))
        log_ts(f"Traceback:\n{traceback_str}")
        try:
            await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: `{error}`", ephemeral=True, delete_after=15)
        except: pass


# --- Run Bot ---
BOT_TOKEN_ENV = os.getenv('DISCORD_TOKEN')
if not BOT_TOKEN_ENV:
    log_ts("CRITICAL ERROR: DISCORD_TOKEN environment variable not found. Bot cannot start.")
else:
    try:
        log_ts("Attempting to run bot...")
        bot.run(BOT_TOKEN_ENV)
    except discord.errors.LoginFailure:
        log_ts("CRITICAL ERROR: Login Failed. Token is invalid or bot has incorrect intents enabled.")
    except discord.errors.PrivilegedIntentsRequired:
        log_ts("CRITICAL ERROR: Privileged Intents (Server Members or Message Content) are not enabled in the Discord Developer Portal for this bot.")
    except Exception as e:
        log_ts(f"CRITICAL ERROR during bot.run(): {e}")
        traceback.print_exc()