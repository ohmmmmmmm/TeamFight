# main.py (‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)

import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime
import pytz
import json
import os
from dotenv import load_dotenv # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "Server is running!"

def run_flask():
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ PORT ‡∏à‡∏≤‡∏Å environment variable, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ 8080 ‡πÄ‡∏õ‡πá‡∏ô default
    port = int(os.environ.get('PORT', 8080)) # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç port ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å env
    app.run(host='0.0.0.0', port=port) # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç port ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å env

def start_server():
    t = Thread(target=run_flask)
    t.daemon = True # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ thread ‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ main program ‡∏õ‡∏¥‡∏î
    t.start()

# --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà environment variables
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ +07 (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
tz = pytz.timezone('Asia/Bangkok')

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
members = {
    "Juno": "‡∏Ç‡∏≤‡∏î",
    "Candy": "‡∏Ç‡∏≤‡∏î",
    "Sindrea": "‡∏Ç‡∏≤‡∏î",
    "Yam": "‡∏Ç‡∏≤‡∏î",
    "Chababa": "‡∏Ç‡∏≤‡∏î",
    "Naila": "‡∏Ç‡∏≤‡∏î",
    "HoneyLex": "‡∏Ç‡∏≤‡∏î",
    "Hanna": "‡∏Ç‡∏≤‡∏î",
    "HeiHei": "‡∏Ç‡∏≤‡∏î",
    "Songkran": "‡∏Ç‡∏≤‡∏î",
    "Aiikz": "‡∏Ç‡∏≤‡∏î",
}

# ‡∏ú‡∏π‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Discord ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
name_mapping = {
    "onitsuka3819": "Juno",
    "candy_dayy": "Candy",
    "sindrea_cz": "Sindrea",
    "yam2196": "Yam",
    "chababa.": "Chababa",
    "naila_888": "Naila",
    "honeylexfahwabwab": "HoneyLex",
    "hanna05682": "Hanna",
    "ms.k3144": "HeiHei",
    "songkran_gbn": "Songkran",
    "aiikz": "Aiikz",

}

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
practice_info = {
    "id": None,
    "date": None,
    "time": None,
    "location": None,
    "is_open_for_signup": False # <<<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠
}

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°
practice_history = []

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
last_practice_message = None

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
update_enabled = True

# ‡πÑ‡∏≠‡∏î‡∏µ‡∏´‡πâ‡∏≠‡∏á
ANNOUNCEMENT_CHANNEL_ID = 1375796432140763216 # ‡πÉ‡∏™‡πà ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏à‡∏£‡∏¥‡∏á
SETTING_CHANNEL_NAME = "üî•‚îÉsetting" # ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á setting
SIGNUP_CHANNEL_NAME = "üî•‚îÉ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°" # ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_history_from_file():
    global practice_history, update_enabled, practice_info
    try:
        with open('practice_history.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            practice_history = data.get("history", [])
            update_enabled = data.get("update_enabled", True)
            # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î practice_info ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å)
            # current_practice_from_file = data.get("current_practice", None)
            # if current_practice_from_file:
            #     practice_info = current_practice_from_file
            # else: # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
            practice_info = {
                "id": None, "date": None, "time": None, "location": None,
                "is_open_for_signup": False
            }

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° ID ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
        id_changed = False
        for i, entry in enumerate(practice_history):
            if "id" not in entry or not entry["id"]:
                entry["id"] = f"{len(practice_history) - i:03d}" # ‡∏´‡∏£‡∏∑‡∏≠ logic ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                id_changed = True
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° is_open_for_signup ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
            if "is_open_for_signup" not in entry:
                entry["is_open_for_signup"] = False # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                id_changed = True # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Å‡∏≤‡∏£ save_history_to_file()

        if id_changed:
            save_history_to_file()

    except FileNotFoundError:
        practice_history = []
        update_enabled = True
        practice_info = {
            "id": None, "date": None, "time": None, "location": None,
            "is_open_for_signup": False
        }
    except json.JSONDecodeError:
        print("Error decoding practice_history.json. File might be corrupted or empty.")
        practice_history = []
        update_enabled = True
        practice_info = {
            "id": None, "date": None, "time": None, "location": None,
            "is_open_for_signup": False
        }

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_history_to_file():
    data = {
        "history": practice_history,
        "update_enabled": update_enabled
        # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å practice_info ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢:
        # "current_practice": practice_info
    }
    with open('practice_history.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÉ‡∏´‡∏°‡πà
def generate_practice_id():
    if not practice_history:
        return "001"
    valid_ids = [int(entry["id"]) for entry in practice_history if entry.get("id") and entry["id"].isdigit()]
    if not valid_ids:
        return "001"
    last_id = max(valid_ids)
    return f"{last_id + 1:03d}"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
def save_current_practice_to_history(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ß‡πà‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    if all([practice_info.get("id"), practice_info.get("date"), practice_info.get("time"), practice_info.get("location")]):
        # ‡∏•‡∏ö entry ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å practice_history
        practice_history[:] = [entry for entry in practice_history if entry.get("id") != practice_info["id"]]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á entry ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö history
        history_entry = {
            "id": practice_info["id"],
            "date": practice_info["date"],
            "time": practice_info["time"],
            "location": practice_info["location"],
            "members": members.copy(), # ‡πÉ‡∏ä‡πâ members ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            "is_open_for_signup": practice_info.get("is_open_for_signup", False) # <<<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        }
        practice_history.append(history_entry)
        practice_history.sort(key=lambda x: x.get("id", "000")) # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID
        save_history_to_file()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
def create_notification():
    if not all([practice_info.get("id"), practice_info.get("date"), practice_info.get("time"), practice_info.get("location")]):
        return None
    notification = f"üì¢ **‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']})**\n"
    notification += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {practice_info['date']}\n"
    notification += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {practice_info['time']}\n"
    notification += f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {practice_info['location']}\n"
    # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ ---
    if practice_info.get("is_open_for_signup", False):
        notification += "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ **‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠**\n"
    else:
        notification += "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: üÖæÔ∏è **‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß**\n"
    # --- ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ---
    notification += "üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πä‡∏á:\n"
    for i, (name, status) in enumerate(members.items(), 1):
        notification += f"{i}. {name} - {status}\n"
    return notification

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° ID
def create_summary(practice_id):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    if practice_info.get("id") == practice_id and all([practice_info.get("date"), practice_info.get("time"), practice_info.get("location")]):
        summary = f"üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id})**\n"
        summary += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {practice_info['date']}\n"
        summary += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {practice_info['time']}\n"
        summary += f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {practice_info['location']}\n"
        summary += "üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πä‡∏á:\n"
        # ‡πÉ‡∏ä‡πâ members ‡∏à‡∏≤‡∏Å practice_info ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        current_members_for_summary = members
        for i, (name, status) in enumerate(current_members_for_summary.items(), 1):
            summary += f"{i}. {name} - {status}\n"
        return summary

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    for entry in practice_history:
        if entry.get("id") == practice_id:
            summary = f"üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id})**\n"
            summary += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {entry['date']}\n"
            summary += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {entry['time']}\n"
            summary += f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {entry['location']}\n"
            summary += "üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πä‡∏á:\n"
            # ‡πÉ‡∏ä‡πâ members ‡∏à‡∏≤‡∏Å entry ‡πÉ‡∏ô history
            for i, (name, status) in enumerate(entry['members'].items(), 1):
                summary += f"{i}. {name} - {status}\n"
            return summary
    return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}!"


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
@tasks.loop(minutes=5)
async def update_status_task():
    if update_enabled:
        global last_practice_message
        announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
        if announcement_channel and practice_info.get("id"): # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if last_practice_message:
                try: await last_practice_message.delete()
                except discord.errors.NotFound: pass
                except discord.errors.Forbidden: print(f"Bot cannot delete messages in {announcement_channel.name}")
                except Exception as e: print(f"Error deleting message: {e}")

            notification = create_notification()
            if notification:
                try: last_practice_message = await announcement_channel.send(notification)
                except discord.errors.Forbidden: print(f"Bot cannot send messages in {announcement_channel.name}")
                except Exception as e: print(f"Error sending message: {e}")

@bot.event
async def on_ready():
    print(f'Bot {bot.user.name} is online!') # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô bot.user.name
    load_history_from_file()
    if not update_status_task.is_running():
        update_status_task.start()
    start_server()
    try:
        game_name = f"‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° | {bot.command_prefix}setplay"
        await bot.change_presence(activity=discord.Game(name=game_name))
        print(f"Bot presence set to: Playing {game_name}")
    except Exception as e:
        print(f"Error setting bot presence: {e}")

def in_channel(channel_name_or_id):
    async def predicate(ctx):
        is_correct_channel = False
        if isinstance(channel_name_or_id, int):
            if ctx.channel.id == channel_name_or_id: is_correct_channel = True
        elif isinstance(channel_name_or_id, str):
            if ctx.channel.name.lower() == channel_name_or_id.lower(): is_correct_channel = True

        if not is_correct_channel:
            if isinstance(channel_name_or_id, str):
                await ctx.send(f"‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á '{channel_name_or_id}' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!", ephemeral=True, delete_after=10)
            else:
                await ctx.send(f"‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!", ephemeral=True, delete_after=10)
            return False
        return True
    return commands.check(predicate)

@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def disable_update(ctx):
    global update_enabled
    if not update_enabled: await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!"); return
    update_enabled = False
    save_history_to_file() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ update_enabled
    await ctx.send("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def enable_update(ctx):
    global update_enabled
    if update_enabled: await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!"); return
    update_enabled = True
    save_history_to_file() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ update_enabled
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    if practice_info.get("id"):
        global last_practice_message
        announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
        if announcement_channel:
            if last_practice_message:
                try: await last_practice_message.delete()
                except: pass
            notification = create_notification()
            if notification:
                try: last_practice_message = await announcement_channel.send(notification)
                except: pass
    await ctx.send("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

@bot.command(name="‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°", aliases=["‡∏ã‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡∏°"]) # ‡πÄ‡∏û‡∏¥‡πà‡∏° alias
@in_channel(SIGNUP_CHANNEL_NAME)
async def sign_up_practice(ctx): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏Å‡∏•
    # <<<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ >>>>
    if not practice_info.get("id"):
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠)!", ephemeral=True, delete_after=10)
        return
    if not practice_info.get("is_open_for_signup", False):
        await ctx.send(f"‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)!", ephemeral=True, delete_after=10)
        return
    # <<<< ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö >>>>

    discord_name = ctx.author.name
    member_key_to_update = name_mapping.get(discord_name) # ‡πÉ‡∏ä‡πâ .get() ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Å‡∏ß‡πà‡∏≤

    if member_key_to_update and member_key_to_update in members:
        if members[member_key_to_update] == "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß":
            await ctx.send(f"{member_key_to_update} ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏µ‡πà‡∏ô‡∏≤‡∏≤‡∏≤!", ephemeral=True, delete_after=10)
            return

        members[member_key_to_update] = "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
        await ctx.send(f"{member_key_to_update} ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        save_current_practice_to_history() # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô history

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        global last_practice_message
        announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
        if announcement_channel and practice_info.get("id"):
            if last_practice_message:
                try: await last_practice_message.delete()
                except: pass
            notification = create_notification()
            if notification:
                try: last_practice_message = await announcement_channel.send(notification)
                except: pass
    else:
        await ctx.send(f"‡∏Ñ‡∏∏‡∏ì ({discord_name}) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ `name_mapping` ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True, delete_after=10)

@bot.command()
async def ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞(ctx):
    if not practice_info.get("id"):
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô!")
        return
    notification = create_notification()
    if notification: await ctx.send(notification)
    else: await ctx.send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!")

@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def setplay(ctx):
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° "‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏•‡∏á "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà
    if practice_info.get("id"):
        # ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å, ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á is_open_for_signup ‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô False ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡∏∏‡∏õ
        if practice_info.get("is_open_for_signup", False):
            print(f"Practice ID {practice_info['id']} was still open for signup before new setplay. Closing it.")
            practice_info["is_open_for_signup"] = False
        save_current_practice_to_history()


    def check(m): return m.author == ctx.author and m.channel == ctx.channel

    await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°:\n1. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 2024-08-15)\n2. ‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 20:00)\n3. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ã‡∏¥‡∏ü‡∏£‡∏≠‡∏á 1)\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter")
    prompts = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD):", "‡πÄ‡∏ß‡∏•‡∏≤ (HH:MM):", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:"]
    responses = []
    for i, prompt_text in enumerate(prompts):
        await ctx.send(prompt_text)
        try:
            msg = await bot.wait_for('message', check=check, timeout=120.0)
            content = msg.content.strip()
            if i == 0:
                try: datetime.strptime(content, '%Y-%m-%d')
                except ValueError: await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (YYYY-MM-DD). ‡πÄ‡∏£‡∏¥‡πà‡∏° !setplay ‡πÉ‡∏´‡∏°‡πà"); return
            if i == 1:
                try: datetime.strptime(content, '%H:%M')
                except ValueError: await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! (HH:MM). ‡πÄ‡∏£‡∏¥‡πà‡∏° !setplay ‡πÉ‡∏´‡∏°‡πà"); return
            responses.append(content)
        except asyncio.TimeoutError: await ctx.send("‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡πÄ‡∏£‡∏¥‡πà‡∏° !setplay ‡πÉ‡∏´‡∏°‡πà"); return

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï practice_info ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà
    practice_info["id"] = generate_practice_id()
    practice_info["date"] = responses[0]
    practice_info["time"] = responses[1]
    practice_info["location"] = responses[2]
    practice_info["is_open_for_signup"] = True # <<<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÉ‡∏´‡∏°‡πà

    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö members ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    for name in members: members[name] = "‡∏Ç‡∏≤‡∏î"

    save_current_practice_to_history() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å "‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" ‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏•‡∏á "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

    global last_practice_message
    announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if announcement_channel:
        if last_practice_message:
            try: await last_practice_message.delete()
            except: pass
        notification = create_notification()
        if notification:
            try:
                last_practice_message = await announcement_channel.send(notification)
                await ctx.send(f"‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß")
            except discord.errors.Forbidden:
                await ctx.send(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)")
        else: await ctx.send("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
    else: await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®! ‡πÅ‡∏ï‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß")

@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def ‡∏™‡∏£‡∏∏‡∏õ(ctx, practice_id: str):
    if not practice_id.isdigit() or len(practice_id) != 3:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 001)"); return

    announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if not announcement_channel:
        await ctx.send(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (ID: {ANNOUNCEMENT_CHANNEL_ID})!"); return

    # <<<< ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ID ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô >>>>
    if practice_info.get("id") == practice_id:
        if practice_info.get("is_open_for_signup", False): # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
            practice_info["is_open_for_signup"] = False
            save_current_practice_to_history() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ
            await ctx.send(f"‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id} (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô) ‡πÑ‡∏î‡πâ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•")
        else:
            await ctx.send(f"‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id} (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô) ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
    # <<<< ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç >>>>

    summary = create_summary(practice_id)
    try:
        await announcement_channel.send(summary)
        await ctx.send(f"‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}) ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß!")
    except discord.errors.Forbidden:
        await ctx.send(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}) ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)")
    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ: {e}")


DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
if DISCORD_TOKEN is None:
    print("Error: DISCORD_TOKEN not found. Please set it in .env or environment variables.")
else:
    try: bot.run(DISCORD_TOKEN)
    except discord.errors.LoginFailure: print("Login Failed: Incorrect token or bot has invalid intents.")
    except Exception as e: print(f"An error occurred: {e}")