# main.py (‡∏£‡∏ß‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)

import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime
import pytz
import json
import os
from dotenv import load_dotenv # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---
from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "Server is running!"

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=8080)

def start_server():
    t = Thread(target=run_flask)
    t.daemon = True # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ thread ‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ main program ‡∏õ‡∏¥‡∏î
    t.start()
    
# --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Flask Server ---

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà environment variables
load_dotenv()

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ bot
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤ +07 (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢)
tz = pytz.timezone('Asia/Bangkok')

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
members = {
    "Juno": "‡∏Ç‡∏≤‡∏î",
    "candy": "‡∏Ç‡∏≤‡∏î",
    "sindrea": "‡∏Ç‡∏≤‡∏î",
    "yam": "‡∏Ç‡∏≤‡∏î",
    "chababa": "‡∏Ç‡∏≤‡∏î",
    "naila": "‡∏Ç‡∏≤‡∏î",
}

# ‡∏ú‡∏π‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Discord ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
name_mapping = {
    "onitsuka3819": "Juno",
    "candy_dayy": "candy",
    "sindrea_cz": "sindrea",
    "yam2196": "yam",
    "chababa.": "chababa",
    "naila_888": "naila",
}

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
practice_info = {
    "id": None,
    "date": None,
    "time": None,
    "location": None
}

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°
practice_history = []

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®
last_practice_message = None

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
update_enabled = True

# ‡πÑ‡∏≠‡∏î‡∏µ‡∏´‡πâ‡∏≠‡∏á
ANNOUNCEMENT_CHANNEL_ID = 1375796432140763216 # ‡πÉ‡∏™‡πà ID ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏à‡∏£‡∏¥‡∏á
SETTING_CHANNEL_NAME = "üî•‚îÉsetting" # ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á setting
SIGNUP_CHANNEL_NAME = "üî•‚îÉ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°" # ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
def load_history_from_file():
    global practice_history, update_enabled
    try:
        with open('practice_history.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
            practice_history = data.get("history", [])
            update_enabled = data.get("update_enabled", True)
        for i, entry in enumerate(practice_history):
            if "id" not in entry or not entry["id"]: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö id ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ empty
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á id ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö logic ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á id)
                # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏´‡πâ id ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö id ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ
                entry["id"] = f"{len(practice_history) - i:03d}" # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î id ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
        save_history_to_file() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á id
    except FileNotFoundError:
        practice_history = []
        update_enabled = True
    except json.JSONDecodeError:
        print("Error decoding practice_history.json. File might be corrupted or empty.")
        practice_history = []
        update_enabled = True


# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_history_to_file():
    data = {
        "history": practice_history,
        "update_enabled": update_enabled
    }
    with open('practice_history.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡πÉ‡∏´‡∏°‡πà
def generate_practice_id():
    if not practice_history:
        return "001"
    # ‡∏Å‡∏£‡∏≠‡∏á entry ‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô None/empty string
    valid_ids = [int(entry["id"]) for entry in practice_history if entry.get("id") and entry["id"].isdigit()]
    if not valid_ids:
        return "001" # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ id ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏•‡∏¢
    last_id = max(valid_ids)
    return f"{last_id + 1:03d}"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°
def save_practice_to_history():
    if all([practice_info["id"], practice_info["date"], practice_info["time"], practice_info["location"]]):
        practice_history[:] = [entry for entry in practice_history if entry.get("id") != practice_info["id"]]
        history_entry = {
            "id": practice_info["id"],
            "date": practice_info["date"],
            "time": practice_info["time"],
            "location": practice_info["location"],
            "members": members.copy()
        }
        practice_history.append(history_entry)
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ID ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        practice_history.sort(key=lambda x: x.get("id", "000"))
        save_history_to_file()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
def create_notification():
    if not all([practice_info["id"], practice_info["date"], practice_info["time"], practice_info["location"]]):
        return None
    notification = f"üì¢ **‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']})**\n"
    notification += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {practice_info['date']}\n"
    notification += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {practice_info['time']}\n"
    notification += f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {practice_info['location']}\n"
    notification += "üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πä‡∏á:\n"
    for i, (name, status) in enumerate(members.items(), 1):
        notification += f"{i}. {name} - {status}\n"
    return notification

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏° ID
def create_summary(practice_id):
    if practice_info.get("id") == practice_id and all([practice_info.get("date"), practice_info.get("time"), practice_info.get("location")]):
        summary = f"üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id})**\n"
        summary += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {practice_info['date']}\n"
        summary += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {practice_info['time']}\n"
        summary += f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {practice_info['location']}\n"
        summary += "üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πä‡∏á:\n"
        for i, (name, status) in enumerate(members.items(), 1):
            summary += f"{i}. {name} - {status}\n"
        return summary
    for entry in practice_history:
        if entry.get("id") == practice_id:
            summary = f"üìä **‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id})**\n"
            summary += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {entry['date']}\n"
            summary += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {entry['time']}\n"
            summary += f"üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {entry['location']}\n"
            summary += "üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πä‡∏á:\n"
            for i, (name, status) in enumerate(entry['members'].items(), 1):
                summary += f"{i}. {name} - {status}\n"
            return summary
    return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}!"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
@tasks.loop(minutes=5)
async def update_status_task(): # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö event
    if update_enabled:
        global last_practice_message
        announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
        if announcement_channel and practice_info.get("id"):
            if last_practice_message:
                try:
                    await last_practice_message.delete()
                except discord.errors.NotFound:
                    pass # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                except discord.errors.Forbidden:
                    print(f"Bot does not have permission to delete messages in {announcement_channel.name}")
                except Exception as e:
                    print(f"Error deleting message: {e}")


            notification = create_notification()
            if notification:
                try:
                    last_practice_message = await announcement_channel.send(notification)
                except discord.errors.Forbidden:
                    print(f"Bot does not have permission to send messages in {announcement_channel.name}")
                except Exception as e:
                    print(f"Error sending message: {e}")


@bot.event
async def on_ready():
    print(f'Bot {bot.user} is online!')
    load_history_from_file()
    if not update_status_task.is_running():
        update_status_task.start()
    start_server() # ‡πÄ‡∏£‡∏¥‡πà‡∏° Flask server ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°

# Decorator ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á
def in_channel(channel_name_or_id):
    async def predicate(ctx):
        if isinstance(channel_name_or_id, int): # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô ID
            if ctx.channel.id != channel_name_or_id:
                await ctx.send(f"‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!")
                return False
        elif isinstance(channel_name_or_id, str): # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
            if ctx.channel.name.lower() != channel_name_or_id.lower():
                await ctx.send(f"‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á '{channel_name_or_id}' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!")
                return False
        return True
    return commands.check(predicate)

@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def disable_update(ctx):
    global update_enabled
    if not update_enabled:
        await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
        return
    update_enabled = False
    save_history_to_file()
    await ctx.send("‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def enable_update(ctx):
    global update_enabled
    if update_enabled:
        await ctx.send("‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
        return
    update_enabled = True
    save_history_to_file()
    announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if announcement_channel and practice_info.get("id"):
        global last_practice_message
        if last_practice_message:
            try:
                await last_practice_message.delete()
            except discord.errors.NotFound: pass
            except discord.errors.Forbidden: print("Cannot delete last_practice_message: Forbidden")
        notification = create_notification()
        if notification:
            try:
                last_practice_message = await announcement_channel.send(notification)
            except discord.errors.Forbidden: print("Cannot send notification: Forbidden")
    await ctx.send("‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

@bot.command()
@in_channel(SIGNUP_CHANNEL_NAME)
async def ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°(ctx):
    discord_name = ctx.author.name # ‡∏´‡∏£‡∏∑‡∏≠ ctx.author.display_name ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    member_key_to_update = None

    # ‡∏´‡∏≤ key ‡πÉ‡∏ô name_mapping ‡∏à‡∏≤‡∏Å discord_name
    for key, value in name_mapping.items():
        # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£ match ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÉ‡∏ä‡πâ ctx.author.id ‡∏ñ‡πâ‡∏≤ discord_name ‡πÑ‡∏°‡πà unique
        if key.lower() == discord_name.lower():
            member_key_to_update = value
            break
    
    if member_key_to_update and member_key_to_update in members:
        members[member_key_to_update] = "‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß"
        await ctx.send(f"{member_key_to_update} ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        save_practice_to_history()

        global last_practice_message
        announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
        if announcement_channel and practice_info.get("id"):
            if last_practice_message:
                try:
                    await last_practice_message.delete()
                except discord.errors.NotFound: pass
                except discord.errors.Forbidden: print("Cannot delete last_practice_message: Forbidden")

            notification = create_notification()
            if notification:
                try:
                    last_practice_message = await announcement_channel.send(notification)
                except discord.errors.Forbidden: print("Cannot send notification: Forbidden")
    else:
        await ctx.send(f"‡∏Ñ‡∏∏‡∏ì ({discord_name}) ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ `name_mapping` ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")


@bot.command()
async def ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞(ctx): # ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡πá‡πÑ‡∏î‡πâ
    if not practice_info.get("id"):
        await ctx.send("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°!")
        return
    notification = create_notification()
    if notification:
        await ctx.send(notification)
    else:
        await ctx.send("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°)!")

@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def setplay(ctx):
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ id)
    if practice_info.get("id"):
        save_practice_to_history()

    def check(m):
        return m.author == ctx.author and m.channel == ctx.channel

    await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°:\n1. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô 2024-08-15)\n2. ‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 20:00)\n3. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏ã‡∏¥‡∏ü‡∏£‡∏≠‡∏á 1)\n‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î Enter ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô")

    prompts = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD):", "‡πÄ‡∏ß‡∏•‡∏≤ (HH:MM):", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà:"]
    responses = []

    for i, prompt_text in enumerate(prompts):
        await ctx.send(prompt_text)
        try:
            msg = await bot.wait_for('message', check=check, timeout=120.0)
            content = msg.content.strip()
            if i == 0: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                try:
                    datetime.strptime(content, '%Y-%m-%d')
                except ValueError:
                    await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ YYYY-MM-DD (‡πÄ‡∏ä‡πà‡∏ô 2024-08-15). ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° !setplay ‡πÉ‡∏´‡∏°‡πà")
                    return
            if i == 1: # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô)
                try:
                    datetime.strptime(content, '%H:%M')
                except ValueError:
                     await ctx.send("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡πÉ‡∏ä‡πâ HH:MM (‡πÄ‡∏ä‡πà‡∏ô 20:00). ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏° !setplay ‡πÉ‡∏´‡∏°‡πà")
                     return
            responses.append(content)
        except asyncio.TimeoutError:
            await ctx.send("‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !setplay ‡πÉ‡∏´‡∏°‡πà")
            return

    practice_info["id"] = generate_practice_id()
    practice_info["date"] = responses[0]
    practice_info["time"] = responses[1]
    practice_info["location"] = responses[2]

    for name in members:
        members[name] = "‡∏Ç‡∏≤‡∏î"

    save_practice_to_history() # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà

    global last_practice_message
    announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if announcement_channel:
        if last_practice_message:
            try:
                await last_practice_message.delete()
            except discord.errors.NotFound: pass
            except discord.errors.Forbidden: print("Cannot delete last_practice_message: Forbidden")
        notification = create_notification()
        if notification:
            try:
                last_practice_message = await announcement_channel.send(notification)
                await ctx.send(f"‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß")
            except discord.errors.Forbidden:
                await ctx.send(f"‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_info['id']}) ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)")
        else:
            await ctx.send("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏î‡πâ")
    else:
        await ctx.send("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®! ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏°‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß")


@bot.command()
@in_channel(SETTING_CHANNEL_NAME)
async def ‡∏™‡∏£‡∏∏‡∏õ(ctx, practice_id: str):
    if not practice_id.isdigit() or len(practice_id) != 3:
        await ctx.send("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 3 ‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 001)")
        return

    announcement_channel = bot.get_channel(ANNOUNCEMENT_CHANNEL_ID)
    if not announcement_channel:
        await ctx.send(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (ID: {ANNOUNCEMENT_CHANNEL_ID})!")
        return

    summary = create_summary(practice_id)
    try:
        await announcement_channel.send(summary)
        await ctx.send(f"‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}) ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡πâ‡∏ß!")
    except discord.errors.Forbidden:
        await ctx.send(f"‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏° (‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà {practice_id}) ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)")
    except Exception as e:
        await ctx.send(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ: {e}")


# ‡∏î‡∏∂‡∏á Token ‡∏à‡∏≤‡∏Å environment variable ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ DISCORD_TOKEN
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')

if DISCORD_TOKEN is None:
    print("Error: DISCORD_TOKEN not found in .env file or environment variables.")
    print("Please create a .env file with DISCORD_TOKEN='your_bot_token_here'")
else:
    try:
        bot.run(DISCORD_TOKEN)
    except discord.errors.LoginFailure:
        print("Login Failed: Incorrect token or bot has invalid intents.")
    except Exception as e:
        print(f"An error occurred while running the bot: {e}")
